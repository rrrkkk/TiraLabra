apply plugin: "c"
apply plugin: 'cunit-test-suite'

model {
    components {
        aes(NativeLibrarySpec) {
	    sources {
    	        c {
        	    source {
		        srcDir "src/aes"
            		include "**/*.c"
        	    }
        	    exportedHeaders {
            	        srcDir "src/aes"
            		include "**/*.h"
        	    }
                }
	    }
	}
    }
}

model {
    components {
        rypto(NativeExecutableSpec) {
	    sources {
    	        c {
        	    source {
		        srcDir "src/source"
            		include "**/*.c"
        	    }
                }
	    }
            sources {
               c.lib library: "aes"
            }
        }
    }
}

model {
    flavors {
        passing
        failing
    }
    repositories {
        libs(PrebuiltLibraries) {
            cunit {
                headers.srcDir "/usr/local/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile =
                        file("/usr/local/lib/libcunit.a")
			// +
                        //      findCUnitLibForPlatform(targetPlatform))
                }
            }
        }
    }
    platforms {
        x86_64 {
            architecture "x86_64"
        }
    }
    components {
        operators(NativeLibrarySpec) {
            targetPlatform "x86_64"
        }
    }
    testSuites {
        aesTest(CUnitTestSuiteSpec) {
            testing $.components.aes
	    sources {
    	        c {
        	    source {
		        srcDir "src/aesTest/cunit"
            		include "**/*.c"
        	    }
                }
	    }
        }
    }
}

model {
    toolChains {
        visualCpp(VisualCpp) {
            // Specify the installDir if Visual Studio cannot be located
            // installDir "C:/Apps/Microsoft Visual Studio 10.0"
        }
        gcc(Gcc) {
            // Uncomment to use a GCC install that is not in the PATH
            path "/usr/local/bin", "/usr/bin"
        }
//         clang(Clang) 
    }
}

model {
    binaries {
        all {
            // Define a preprocessor macro for every binary
            // cppCompiler.define "NDEBUG"

            // Define toolchain-specific compiler and linker options
            if (toolChain in Gcc) {
                // cppCompiler.args "-I/usr/local/include"
                // linker.args "-L/usr/local/lib"
            }
            if (toolChain in VisualCpp) {
                cppCompiler.args "/Zi"
                linker.args "/DEBUG"
            }
        }
    }
}

model {
    binaries {
        withType(CUnitTestSuiteBinarySpec) {
            lib library: "cunit", linkage: "static"

            if (flavor == flavors.failing) {
                cCompiler.define "PLUS_BROKEN"
            }
        }
    }
}
